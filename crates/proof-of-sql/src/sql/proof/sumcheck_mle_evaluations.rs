use super::SumcheckRandomScalars;
use crate::base::{
    polynomial::{
        compute_truncated_lagrange_basis_inner_product, compute_truncated_lagrange_basis_sum,
    },
    scalar::Scalar,
};

/// Evaluations for different MLEs at the random point chosen for sumcheck
#[derive(Default)]
pub struct SumcheckMleEvaluations<'a, S: Scalar> {
    /// The length of the input table for a basic filter. When we support more complex queries, this may need to split.
    pub input_length: usize,
    /// The length of the output table for a basic filter. When we support more complex queries, this may need to split.
    pub output_length: usize,
    /// The number of sumcheck variables.
    pub num_sumcheck_variables: usize,
    /// The evaluation (at the random point generated by sumcheck) of an MLE `{x_i}` where
    ///     `x_i = 1` if `i < input_length;`
    ///         = 0, otherwise
    pub input_one_evaluation: S,

    /// The evaluation (at the random point generated by sumcheck) of an MLE `{x_i}` where
    ///     `x_i = 1` if `i < output_length;`
    ///         = 0, otherwise
    pub output_one_evaluation: S,

    /// The evaluation (at the random point generated by sumcheck) of the MLE formed from entrywise random scalars.
    ///
    /// This is used within sumcheck to establish that a given expression
    /// is zero across all entries.
    pub random_evaluation: S,
    /// The evaluations (at the random point generated by sumcheck) of the mles that are evaluated by the inner product argument. These are batched together and checked by a single IPA.
    pub pcs_proof_evaluations: &'a [S],
}

#[allow(
    clippy::missing_panics_doc,
    reason = "Assertions ensure preconditions are met, eliminating the possibility of panic."
)]
impl<'a, S: Scalar> SumcheckMleEvaluations<'a, S> {
    /// Constructs the evaluations for the sumcheck MLEs.
    ///
    /// # Inputs
    /// - `evaluation_point` - the point, outputted by sumcheck, at which to evaluate the MLEs
    /// - `sumcheck_random_scalars` - the random scalars used to batch the evaluations that are proven via IPA
    /// - `pcs_proof_evaluations` - the evaluations of the MLEs that are proven via IPA
    pub fn new(
        input_length: usize,
        output_length: usize,
        evaluation_point: &[S],
        sumcheck_random_scalars: &SumcheckRandomScalars<S>,
        pcs_proof_evaluations: &'a [S],
    ) -> Self {
        assert_eq!(
            evaluation_point.len(),
            sumcheck_random_scalars.entrywise_point.len()
        );
        assert_eq!(input_length, sumcheck_random_scalars.table_length);
        let random_evaluation = compute_truncated_lagrange_basis_inner_product(
            input_length,
            evaluation_point,
            sumcheck_random_scalars.entrywise_point,
        );
        let input_one_evaluation =
            compute_truncated_lagrange_basis_sum(input_length, evaluation_point);
        let output_one_evaluation =
            compute_truncated_lagrange_basis_sum(output_length, evaluation_point);
        Self {
            input_length,
            output_length,
            num_sumcheck_variables: evaluation_point.len(),
            input_one_evaluation,
            output_one_evaluation,
            random_evaluation,
            pcs_proof_evaluations,
        }
    }
}
